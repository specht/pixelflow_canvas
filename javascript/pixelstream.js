const vga_palette = [
    0x00, 0x00, 0x00,
    0x00, 0x00, 0xaa,
    0x00, 0xaa, 0x00,
    0x00, 0xaa, 0xaa,
    0xaa, 0x00, 0x00,
    0xaa, 0x00, 0xaa,
    0xaa, 0x55, 0x00,
    0xaa, 0xaa, 0xaa,
    0x55, 0x55, 0x55,
    0x55, 0x55, 0xff,
    0x55, 0xff, 0x55,
    0x55, 0xff, 0xff,
    0xff, 0x55, 0x55,
    0xff, 0x55, 0xff,
    0xff, 0xff, 0x55,
    0xff, 0xff, 0xff,
    0x00, 0x00, 0x00,
    0x14, 0x14, 0x14,
    0x20, 0x20, 0x20,
    0x2c, 0x2c, 0x2c,
    0x38, 0x38, 0x38,
    0x45, 0x45, 0x45,
    0x51, 0x51, 0x51,
    0x61, 0x61, 0x61,
    0x71, 0x71, 0x71,
    0x82, 0x82, 0x82,
    0x92, 0x92, 0x92,
    0xa2, 0xa2, 0xa2,
    0xb6, 0xb6, 0xb6,
    0xcb, 0xcb, 0xcb,
    0xe3, 0xe3, 0xe3,
    0xff, 0xff, 0xff,
    0x00, 0x00, 0xff,
    0x41, 0x00, 0xff,
    0x7d, 0x00, 0xff,
    0xbe, 0x00, 0xff,
    0xff, 0x00, 0xff,
    0xff, 0x00, 0xbe,
    0xff, 0x00, 0x7d,
    0xff, 0x00, 0x41,
    0xff, 0x00, 0x00,
    0xff, 0x41, 0x00,
    0xff, 0x7d, 0x00,
    0xff, 0xbe, 0x00,
    0xff, 0xff, 0x00,
    0xbe, 0xff, 0x00,
    0x7d, 0xff, 0x00,
    0x41, 0xff, 0x00,
    0x00, 0xff, 0x00,
    0x00, 0xff, 0x41,
    0x00, 0xff, 0x7d,
    0x00, 0xff, 0xbe,
    0x00, 0xff, 0xff,
    0x00, 0xbe, 0xff,
    0x00, 0x7d, 0xff,
    0x00, 0x41, 0xff,
    0x7d, 0x7d, 0xff,
    0x9e, 0x7d, 0xff,
    0xbe, 0x7d, 0xff,
    0xdf, 0x7d, 0xff,
    0xff, 0x7d, 0xff,
    0xff, 0x7d, 0xdf,
    0xff, 0x7d, 0xbe,
    0xff, 0x7d, 0x9e,
    0xff, 0x7d, 0x7d,
    0xff, 0x9e, 0x7d,
    0xff, 0xbe, 0x7d,
    0xff, 0xdf, 0x7d,
    0xff, 0xff, 0x7d,
    0xdf, 0xff, 0x7d,
    0xbe, 0xff, 0x7d,
    0x9e, 0xff, 0x7d,
    0x7d, 0xff, 0x7d,
    0x7d, 0xff, 0x9e,
    0x7d, 0xff, 0xbe,
    0x7d, 0xff, 0xdf,
    0x7d, 0xff, 0xff,
    0x7d, 0xdf, 0xff,
    0x7d, 0xbe, 0xff,
    0x7d, 0x9e, 0xff,
    0xb6, 0xb6, 0xff,
    0xc7, 0xb6, 0xff,
    0xdb, 0xb6, 0xff,
    0xeb, 0xb6, 0xff,
    0xff, 0xb6, 0xff,
    0xff, 0xb6, 0xeb,
    0xff, 0xb6, 0xdb,
    0xff, 0xb6, 0xc7,
    0xff, 0xb6, 0xb6,
    0xff, 0xc7, 0xb6,
    0xff, 0xdb, 0xb6,
    0xff, 0xeb, 0xb6,
    0xff, 0xff, 0xb6,
    0xeb, 0xff, 0xb6,
    0xdb, 0xff, 0xb6,
    0xc7, 0xff, 0xb6,
    0xb6, 0xff, 0xb6,
    0xb6, 0xff, 0xc7,
    0xb6, 0xff, 0xdb,
    0xb6, 0xff, 0xeb,
    0xb6, 0xff, 0xff,
    0xb6, 0xeb, 0xff,
    0xb6, 0xdb, 0xff,
    0xb6, 0xc7, 0xff,
    0x00, 0x00, 0x71,
    0x1c, 0x00, 0x71,
    0x38, 0x00, 0x71,
    0x55, 0x00, 0x71,
    0x71, 0x00, 0x71,
    0x71, 0x00, 0x55,
    0x71, 0x00, 0x38,
    0x71, 0x00, 0x1c,
    0x71, 0x00, 0x00,
    0x71, 0x1c, 0x00,
    0x71, 0x38, 0x00,
    0x71, 0x55, 0x00,
    0x71, 0x71, 0x00,
    0x55, 0x71, 0x00,
    0x38, 0x71, 0x00,
    0x1c, 0x71, 0x00,
    0x00, 0x71, 0x00,
    0x00, 0x71, 0x1c,
    0x00, 0x71, 0x38,
    0x00, 0x71, 0x55,
    0x00, 0x71, 0x71,
    0x00, 0x55, 0x71,
    0x00, 0x38, 0x71,
    0x00, 0x1c, 0x71,
    0x38, 0x38, 0x71,
    0x45, 0x38, 0x71,
    0x55, 0x38, 0x71,
    0x61, 0x38, 0x71,
    0x71, 0x38, 0x71,
    0x71, 0x38, 0x61,
    0x71, 0x38, 0x55,
    0x71, 0x38, 0x45,
    0x71, 0x38, 0x38,
    0x71, 0x45, 0x38,
    0x71, 0x55, 0x38,
    0x71, 0x61, 0x38,
    0x71, 0x71, 0x38,
    0x61, 0x71, 0x38,
    0x55, 0x71, 0x38,
    0x45, 0x71, 0x38,
    0x38, 0x71, 0x38,
    0x38, 0x71, 0x45,
    0x38, 0x71, 0x55,
    0x38, 0x71, 0x61,
    0x38, 0x71, 0x71,
    0x38, 0x61, 0x71,
    0x38, 0x55, 0x71,
    0x38, 0x45, 0x71,
    0x51, 0x51, 0x71,
    0x59, 0x51, 0x71,
    0x61, 0x51, 0x71,
    0x69, 0x51, 0x71,
    0x71, 0x51, 0x71,
    0x71, 0x51, 0x69,
    0x71, 0x51, 0x61,
    0x71, 0x51, 0x59,
    0x71, 0x51, 0x51,
    0x71, 0x59, 0x51,
    0x71, 0x61, 0x51,
    0x71, 0x69, 0x51,
    0x71, 0x71, 0x51,
    0x69, 0x71, 0x51,
    0x61, 0x71, 0x51,
    0x59, 0x71, 0x51,
    0x51, 0x71, 0x51,
    0x51, 0x71, 0x59,
    0x51, 0x71, 0x61,
    0x51, 0x71, 0x69,
    0x51, 0x71, 0x71,
    0x51, 0x69, 0x71,
    0x51, 0x61, 0x71,
    0x51, 0x59, 0x71,
    0x00, 0x00, 0x41,
    0x10, 0x00, 0x41,
    0x20, 0x00, 0x41,
    0x30, 0x00, 0x41,
    0x41, 0x00, 0x41,
    0x41, 0x00, 0x30,
    0x41, 0x00, 0x20,
    0x41, 0x00, 0x10,
    0x41, 0x00, 0x00,
    0x41, 0x10, 0x00,
    0x41, 0x20, 0x00,
    0x41, 0x30, 0x00,
    0x41, 0x41, 0x00,
    0x30, 0x41, 0x00,
    0x20, 0x41, 0x00,
    0x10, 0x41, 0x00,
    0x00, 0x41, 0x00,
    0x00, 0x41, 0x10,
    0x00, 0x41, 0x20,
    0x00, 0x41, 0x30,
    0x00, 0x41, 0x41,
    0x00, 0x30, 0x41,
    0x00, 0x20, 0x41,
    0x00, 0x10, 0x41,
    0x20, 0x20, 0x41,
    0x28, 0x20, 0x41,
    0x30, 0x20, 0x41,
    0x38, 0x20, 0x41,
    0x41, 0x20, 0x41,
    0x41, 0x20, 0x38,
    0x41, 0x20, 0x30,
    0x41, 0x20, 0x28,
    0x41, 0x20, 0x20,
    0x41, 0x28, 0x20,
    0x41, 0x30, 0x20,
    0x41, 0x38, 0x20,
    0x41, 0x41, 0x20,
    0x38, 0x41, 0x20,
    0x30, 0x41, 0x20,
    0x28, 0x41, 0x20,
    0x20, 0x41, 0x20,
    0x20, 0x41, 0x28,
    0x20, 0x41, 0x30,
    0x20, 0x41, 0x38,
    0x20, 0x41, 0x41,
    0x20, 0x38, 0x41,
    0x20, 0x30, 0x41,
    0x20, 0x28, 0x41,
    0x2c, 0x2c, 0x41,
    0x30, 0x2c, 0x41,
    0x34, 0x2c, 0x41,
    0x3c, 0x2c, 0x41,
    0x41, 0x2c, 0x41,
    0x41, 0x2c, 0x3c,
    0x41, 0x2c, 0x34,
    0x41, 0x2c, 0x30,
    0x41, 0x2c, 0x2c,
    0x41, 0x30, 0x2c,
    0x41, 0x34, 0x2c,
    0x41, 0x3c, 0x2c,
    0x41, 0x41, 0x2c,
    0x3c, 0x41, 0x2c,
    0x34, 0x41, 0x2c,
    0x30, 0x41, 0x2c,
    0x2c, 0x41, 0x2c,
    0x2c, 0x41, 0x30,
    0x2c, 0x41, 0x34,
    0x2c, 0x41, 0x3c,
    0x2c, 0x41, 0x41,
    0x2c, 0x3c, 0x41,
    0x2c, 0x34, 0x41,
    0x2c, 0x30, 0x41,
    0x00, 0x00, 0x00,
    0x00, 0x00, 0x00,
    0x00, 0x00, 0x00,
    0x00, 0x00, 0x00,
    0x00, 0x00, 0x00,
    0x00, 0x00, 0x00,
    0x00, 0x00, 0x00,
    0x00, 0x00, 0x00,
];
var palette = vga_palette;
const canvas = document.getElementById('pixelstream_canvas');
var crt_width = canvas.width;
var crt_height = canvas.height;
var ctx = canvas.getContext("2d", { alpha: false, willReadFrequently: true });
var data = ctx.getImageData(0, 0, canvas.width, canvas.height);
var pixels = data.data;
ctx.fillStyle = '#000000';
ctx.fillRect(0, 0, crt_width, crt_height);
var framebuffer = new Uint8Array(crt_width * crt_height * 3);
var color_mode = 0;
var x = 0;
var y = 0;

function vertical_refresh() {
    let t = 0;
    if (color_mode === 0) {
        for (let i = 0; i < crt_width * crt_height * 3; i++) {
            pixels[t] = framebuffer[i];
            t += 1;
            if (i % 3 === 2) { t += 1; }
        }
    } else {
        for (let i = 0; i < crt_width * crt_height; i++) {
            let c = framebuffer[i];
            pixels[t++] = palette[c * 3 + 0];
            pixels[t++] = palette[c * 3 + 1];
            pixels[t++] = palette[c * 3 + 2];
            t++;
        }
    }
    ctx.putImageData(data, 0, 0);
    requestAnimationFrame(vertical_refresh);
}

requestAnimationFrame(vertical_refresh);

window.addEventListener('message', event => {
    const messages = event.data;
    for (let message of messages) {
        if (message.command === 'reset') {
            x = 0;
            y = 0;
        } else if (message.command === 'set_size') {
            canvas.width = message.width;
            canvas.height = message.height;
            crt_width = message.width;
            crt_height = message.height;
            ctx = canvas.getContext("2d", { alpha: false, willReadFrequently: true });
            data = ctx.getImageData(0, 0, canvas.width, canvas.height);
            pixels = data.data;
        } else if (message.command === 'set_color_mode') {
            color_mode = message.mode;
            framebuffer = new Uint8Array(crt_width * crt_height * (color_mode === 0 ? 3 : 1));
        } else if (message.command === 'set_palette') {
            palette[message.i * 3 + 0] = message.r;
            palette[message.i * 3 + 1] = message.g;
            palette[message.i * 3 + 2] = message.b;
        } else if (message.command === 'move_to') {
            x = message.x;
            y = message.y;
        } else if (message.command === 'set_pixel') {
            let color = message.color;
            let offset = y * crt_width + x;
            if (color_mode === 0) { offset *= 3; }
            if (color_mode === 0) {
                framebuffer[offset++] = color[0] & 0xff;
                framebuffer[offset++] = color[1] & 0xff;
                framebuffer[offset++] = color[2] & 0xff;
            } else {
                framebuffer[offset++] = color[0] & 0xff;
            }
            x += 1;
            if (x >= crt_width) {
                x = 0;
                y = (y + 1) % crt_height;
            }
        } else if (message.command === 'set_buffer') {
            let max = crt_width * crt_height * (color_mode === 0 ? 3 : 1);
            for (let i = 0; i < max; i++) {
                framebuffer[i] = message.buffer[i];
            }
        }
    }
});

